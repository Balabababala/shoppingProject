-- 清空舊資料（使用 TRUNCATE 可快速清除並重置自增）
SET FOREIGN_KEY_CHECKS = 0;
TRUNCATE TABLE cart_items;
TRUNCATE TABLE order_items;
TRUNCATE TABLE orders;
TRUNCATE TABLE products;
TRUNCATE TABLE users;
TRUNCATE TABLE roles;
SET FOREIGN_KEY_CHECKS = 1;

-- 生成 3 roles (buyer, seller, admin)
INSERT INTO roles (id, name) VALUES
(1, 'buyer'),
(2, 'seller'),
(3, 'admin');

-- 生成 9 users (buyer, seller, admin)
INSERT INTO users (
    id, username, password_hash, email, role_id, created_at, updated_at, is_active, is_email_verified
)
VALUES
(1, 'buyer1', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'buyer1@example.com', 1, NOW(), NOW(), 1, 1),
(2, 'buyer2', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'buyer2@example.com', 1, NOW(), NOW(), 1, 1),
(3, 'buyer3', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'buyer3@example.com', 1, NOW(), NOW(), 1, 1),
(4, 'seller1', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'seller1@example.com', 2, NOW(), NOW(), 1, 1),
(5, 'seller2', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'seller2@example.com', 2, NOW(), NOW(), 1, 1),
(6, 'seller3', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'seller3@example.com', 2, NOW(), NOW(), 1, 1),
(7, 'admin1', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'admin1@example.com', 3, NOW(), NOW(), 1, 1),
(8, 'admin2', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'admin2@example.com', 3, NOW(), NOW(), 1, 1),
(9, 'admin3', '$2a$10$DKARKUQvobxqUoJY/bezNuZbmTlgm0pvZZ.ne1TaUVPKNrdQ2aSJS', 'admin3@example.com', 3, NOW(), NOW(), 1, 1);

-- 生成序號表 seq (1~2000)
DROP TEMPORARY TABLE IF EXISTS seq;
CREATE TEMPORARY TABLE seq (n INT PRIMARY KEY);

INSERT INTO seq (n)
SELECT a.N + b.N * 100 + 1 AS n
FROM 
  (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a,
  (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b
WHERE a.N + b.N * 100 + 1 <= 2000;

-- 生成 2000 products
SET @rownum := 0;
INSERT INTO products (name, description, price, stock, category_id, seller_id, created_at)
SELECT 
  CONCAT('Product ', @rownum := @rownum + 1),
  CONCAT('Description for product ', @rownum),
  ROUND(10 + (RAND() * 90), 2),
  FLOOR(RAND() * 100),
  FLOOR(1 + (RAND() * 21)),
  FLOOR(4 + (RAND() * 3)),  -- seller_id 4~6，包含全部賣家
  NOW()
FROM 
  (SELECT 1 FROM (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t1,
                 (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t2,
                 (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t3,
                 (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t4,
                 (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) t5) seqs
LIMIT 2000;

-- 生成 2000 orders
INSERT INTO orders (
  buyer_id, seller_id, order_date, order_status, payment_status, shipment_status,
  shipping_method, payment_method, tracking_number, receiver_name, receiver_phone,
  total_amount, shipping_address, notes, created_at, updated_at
)
SELECT
  FLOOR(1 + RAND() * 3) AS buyer_id,        -- 1~3 buyers
  FLOOR(4 + RAND() * 3) AS seller_id,       -- 4~6 sellers
  NOW() - INTERVAL FLOOR(RAND() * 365) DAY AS order_date,
  'PENDING' AS order_status,
  'PENDING' AS payment_status,
  'NOT_SHIPPED' AS shipment_status,
  'Standard Shipping' AS shipping_method,
  'Credit Card' AS payment_method,
  CONCAT('TRK', LPAD(n, 6, '0')) AS tracking_number,
  CONCAT('Receiver ', n) AS receiver_name,
  CONCAT('0912', LPAD(n, 6, '0')) AS receiver_phone,
  ROUND(RAND() * 100 + 20, 2) AS total_amount,
  CONCAT('123 Some Street #', n) AS shipping_address,
  NULL AS notes,
  NOW() AS created_at,
  NOW() AS updated_at
FROM seq;

-- 生成 2000 order_items，確保 quantity 與 unit_price 乘積計算正確
INSERT INTO order_items (order_id, product_id, quantity, unit_price, total_price, created_at)
SELECT
  FLOOR(1 + RAND() * (SELECT MAX(id) FROM orders)) AS order_id,
  FLOOR(1 + RAND() * (SELECT MAX(id) FROM products)) AS product_id,
  q.quantity,
  q.unit_price,
  q.quantity * q.unit_price AS total_price,
  NOW() AS created_at
FROM (
  SELECT 
    FLOOR(1 + RAND() * 5) AS quantity,
    ROUND(10 + RAND() * 90, 2) AS unit_price
  FROM seq LIMIT 2000
) q;


