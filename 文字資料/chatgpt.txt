專案登記
5/4		+文字說明
5/11		+功能架構
		
5/18    	履歷
	

一般使用者
Home
|__ List
|     |__ 商品分類 碰到會有(2-3 個靜態分類) 
|     |				     |__(按到進)商品列表
|     |   				    |__ (按到開分頁) 詳細資料 (包含圖片、價格、描述、留言評價)
|     |__ 最近看過 (靜態或簡單動態展示)
|     |       |__商品列表
|     |       	     |__ (按到進)詳細資料 (包含圖片、價格、描述)
|     |__ 購物車 (按到開 靜態展示商品與總金額，模擬結帳)
|     |__ Search
|     |     |__搜尋結果 (靜態模擬，輸入關鍵字顯示結果)
|     |     |     |__商品列表
|     |     |         |__ (按到開分頁)詳細資料 (1-2 個商品頁面，包含圖片、價格、描述)
|     |     |__篩選功能 (1-2 個簡單篩選，如價格排序)
|     |           |__商品列表
|     |               |__ (按到開分頁)詳細資料 (包含圖片、價格、描述)
|     |__會員中心	    
|     |   |__ (按到進)買家頁面(買家帳號到)
|     |   |        	|__ 查看訂單 (1-2 筆靜態訂單)
|     |   |        	|__ 編輯資料 (靜態展示用戶資料)
|     |   |__ (按到進)賣家頁面(賣家帳號到)
|     |		   	|__ 上架商品
|     |	     	   	|__ 查看已上架商品 (1-2 個靜態商品 可編輯)
|     |            	|__ 查看訂單 (1-2 筆靜態訂單)
|     |	           	|__ 編輯資料 (靜態展示用戶資料)
|     |	           	
|     |__ 通知中心           	
|     |	           	
|     |	           	
|     |__ 登錄/註冊 (靜態表單)(分買家賣家)(沒登錄時)
|     	   
|___推薦 (靜態展示 3-4 個商品)





員工後台
一個List
Dashboard (儀表板)
|__ 系統概況 (2-3 個靜態圖表：訂單數、銷售額)
|__ 通知中心 (改成 給使用者通知)(有時間再做 3-5 條靜態通知，模擬標記已讀 支付失敗、庫存不足、退貨申請)

商品管理 (Product Management)(雖然是C2C 但還是要有)
|__ 商品列表 (5-10 筆假數據，模擬編輯/刪除)
|__ 新增商品 (簡單表單，模擬提交)
|__ 編輯商品 (預填表單，模擬更新)
|__ 商品分類管理 (2-3 個靜態分類，模擬新增/刪除)
|__ 庫存管理 (簡單表格，模擬更新庫存)

訂單管理 (Order Management)
|__ 訂單列表 (5-10 筆假訂單，簡單狀態篩選)
|__ 訂單詳情 (靜態頁面，顯示假訂單資訊)(設置模擬狀態按鈕)
|__ 出貨處理 (輸入物流號碼，模擬出貨)

用戶管理 (User Management)
|__ 會員列表 (5-10 個假用戶，顯示基本資料)
|__ 權限設定 (下拉選單模擬權限調整)
|__ 停用帳號 (按鈕模擬停用)

推薦系統管理 (Recommendation Settings)
|__ 設定推薦規則 (簡單表單，模擬設定)
|__ 編輯推薦內容 (靜態展示 3-4 個推薦商品)

搜尋與瀏覽紀錄 (Search & Activity Logs)
|__ 搜尋紀錄查詢 (5-10 筆假紀錄表格)
|__ 最近瀏覽商品紀錄 (5-10 筆假紀錄表格)
帳號管理 (Account)
|__ 修改密碼 (簡單表單，模擬更新)
|__ 登出 (跳轉登入頁，顯示已登出)



資料庫在別的地方

功能詳情

1. 訂單創建（Order Creation）
客戶（商業客戶）向供應商下訂單。

系統生成訂單並分配訂單編號。

訂單內容包括產品、數量、價格、交貨日期等。

2. 訂單確認（Order Confirmation）
供應商確認收到訂單。

供應商檢查訂單內容、庫存、付款條件等。

系統向客戶發送訂單確認通知。

如果有問題，會回復客戶修改。

3. 付款審核（Payment Review）
客戶根據協議進行付款。

付款方式通常包括銀行轉帳、信用賬戶、信用證等。

供應商審核客戶的付款狀況。

如果付款方式是信用賬戶或分期付款，會進行信用審核。

4. 訂單處理（Order Processing）
訂單被發送到倉庫進行處理。

根據訂單需求，進行庫存確認和準備發貨。

若庫存不足，可能需要向生產部門或其他供應商訂購原料。

裝箱、標籤、準備發貨。

5. 出貨安排（Shipment Scheduling）
訂單處理完成後，會安排出貨。

設定交貨日期、選擇物流方式（如空運、海運、陸運等）。

客戶確認或修改交貨安排。

生成發貨單和運輸單。

6. 發貨（Shipment）
根據訂單和交貨安排，商品發貨。

物流公司負責商品的運送。

供應商將發貨通知發送給客戶，通常包括運單號碼。

7. 商品運送（Shipping）
物流系統更新商品的運送狀態。

客戶能查看物流追蹤信息，確認商品運送進度。

若有任何延遲或問題，供應商會通知客戶。

8. 交付（Delivery）
商品按預定時間送達客戶。

客戶確認收貨並驗貨。

客戶可能會提出貨物損壞或數量問題，需進行退換貨處理。

9. 驗收與檢查（Acceptance & Inspection）
客戶檢查商品質量、數量、是否符合訂單要求。

若商品有問題，會進行退貨或換貨處理。

驗收過程中，客戶可能需要填寫驗收報告或簽署相關文件。

10. 結算（Invoice and Payment）
供應商發送發票給客戶，並要求結算付款。

客戶根據約定的付款條件付款，通常包括30天、60天或90天的支付期限。

若有折扣或早期付款的優惠，會在結算時扣除。

11. 訂單完成（Order Completed）
當客戶完成付款，並確認無退貨問題後，訂單完成。

系統將訂單狀態設為「已完成」，並存檔以便未來參考。

若有延遲付款或其他問題，訂單可能被標註為「待結算」或「逾期」。

常見的B2B訂單狀態
1.待確認（Pending） - 訂單創建後，等待供應商確認。

2.待付款（Pending Payment） - 訂單等待客戶付款。

3.付款處理中（Payment Processing） - 供應商正在審核付款狀況。

4.訂單處理中（Processing） - 供應商開始處理訂單，庫存檢查與準備。

5.待發貨（Pending Shipment） - 等待發貨安排。

6.已發貨（Shipped） - 訂單已發貨，物流正在運送中。

7.已交付（Delivered） - 客戶已收到商品並完成驗收。

8.已完成（Completed） - 訂單所有流程結束，無需再進行後續操作。

9.退貨處理中（Return Processed） - 客戶要求退貨或換貨，正在進行處理。

10.過期（Expired） - 付款過期或訂單未能按時處理。

欄位	誰控制	主要用在哪裡
order_status	系統或人工控制（依照 payment 和 shipment 進度自動推動，也可能人工干預）	決定整筆訂單整體「流程位置」是什麼。（營運/客服主要看這個）
payment_status	支付模組控制（例如第三方金流回傳的成功/失敗結果，或人工標記退款）	負責付款本身的結果與狀態，跟物流無關。 應該串流，但寫按鈕替代真實狀態
shipment_status	出貨模組控制（例如倉庫系統、物流單號填寫、物流追蹤回傳）	負責出貨與配送過程的追蹤，不管付款是否成功。 

✅ 模擬付款成功

📦 模擬出貨

📬 模擬送達

❌ 模擬付款失敗 / 退款

🔄 模擬退貨流程  應該串流，但寫按鈕替代真實狀態
1. users - 使用者表
2. roles - 角色表
3. permissions - 權限表
4. role_permissions - 角色權限對應表
5. login_logs 登錄紀錄					  //使用者生成
6. products - 商品表					  //使用者生成(賣家)
7. categories - 商品分類表
8. cart_items - 購物車明細				  //使用者生成(買家)
9. orders - 訂單主表					  //使用者生成(買家) 員工可看 設定
10. order_items - 訂單明細				  //使用者生成 員工可看 設定
11. recently_viewed - 瀏覽歷史				  //使用者生成 員工可看
12. search_history  - 歷史收尋				  //使用者生成 員工可看
13. recommended_products -推薦  			  //員工可設定 user_id 為null 表全體推薦
14. product_reviews -     評價				  //使用者生成
15. 商品評價 不重複
16. notifications - 通知中心				  //員工生成 使用者看到

一般員工		❌ 無法管理角色與權限資料表
中階主管（選擇性）	✅ 只能將既有角色分配給員工
超級管理員		✅ 可新增、編輯、刪除角色與權限

create database shop
char set utf8mb4;

use shop;
CREATE TABLE users (
    id BIGINT PRIMARY KEY COMMENT '使用者 ID',
    username VARCHAR(255) UNIQUE COMMENT '使用者名稱',
    hash_password VARCHAR(255) COMMENT '密碼（加密）',
    hash_salt VARCHAR(255) COMMENT '加鹽',
    email VARCHAR(255) UNIQUE COMMENT '電子郵件',
    role_id BIGINT NOT NULL COMMENT '角色 ID',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    last_login_at DATETIME COMMENT '最後登入時間',
    is_active BOOLEAN COMMENT '是否啟用',
    completed BOOLEAN COMMENT '是否驗證',
    FOREIGN KEY (role_id) REFERENCES roles(id)
);

CREATE TABLE roles (
    id BIGINT PRIMARY KEY COMMENT '角色 ID',
    name VARCHAR(100) UNIQUE COMMENT '角色名稱',
    description TEXT COMMENT '角色描述',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間'
);

CREATE TABLE permissions (
    id BIGINT PRIMARY KEY COMMENT '權限 ID',
    name VARCHAR(100) UNIQUE COMMENT '權限名稱',
    description TEXT COMMENT '權限描述',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間'
);

CREATE TABLE role_permissions (
    role_id BIGINT NOT NULL COMMENT '角色 ID',
    permission_id BIGINT NOT NULL COMMENT '權限 ID',
    assigned_at DATETIME COMMENT '指派時間',
    created_at DATETIME COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    PRIMARY KEY (role_id, permission_id),
    FOREIGN KEY (role_id) REFERENCES roles(id),
    FOREIGN KEY (permission_id) REFERENCES permissions(id)
);

CREATE TABLE login_logs (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '登錄紀錄 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    ip_address VARCHAR(45) COMMENT 'IP 地址',
    user_agent TEXT COMMENT '使用者代理',
    login_time DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '登錄時間',
    success BOOLEAN COMMENT '登錄是否成功',
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE products (
    id BIGINT PRIMARY KEY COMMENT '產品 ID',
    name VARCHAR(255) COMMENT '產品名稱',
    description TEXT COMMENT '產品描述',
    price DECIMAL(10, 2) COMMENT '價格',
    stock INT COMMENT '庫存',
    image_url TEXT COMMENT '圖片網址',
    category_id BIGINT NOT NULL COMMENT '分類 ID',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

CREATE TABLE categories (
    id BIGINT PRIMARY KEY COMMENT '分類 ID',
    name VARCHAR(100) UNIQUE COMMENT '分類名稱',
    parent_id BIGINT COMMENT '父分類 ID',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (parent_id) REFERENCES categories(id)
);

CREATE TABLE cart_items (
    id BIGINT PRIMARY KEY COMMENT '購物車項目 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    product_id BIGINT NOT NULL COMMENT '產品 ID',
    quantity INT COMMENT '數量',
    added_at DATETIME COMMENT '加入時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE orders (
    id BIGINT PRIMARY KEY COMMENT '訂單 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    seller_id BIGINT NOT NULL COMMENT '賣方 ID',
    order_date DATETIME COMMENT '訂單時間',
    order_status ENUM('PENDING', 'PAID', 'SHIPPED', 'DELIVERED', 'COMPLETED', 'CANCELLED', 'RETURN_REQUESTED', 'RETURNED') COMMENT '訂單狀態',
    payment_status ENUM('PENDING', 'PAID', 'FAILED', 'REFUNDED') COMMENT '付款狀態',
    shipment_status ENUM('NOT_SHIPPED', 'SHIPPED', 'IN_TRANSIT', 'DELIVERED', 'RETURNING') COMMENT '出貨與物流狀態',
    shipping_method VARCHAR(100) COMMENT '配送方式',
    payment_method VARCHAR(100) COMMENT '付款方式',
    tracking_number VARCHAR(255) COMMENT '物流追蹤號碼',
    receiver_name VARCHAR(255) COMMENT '收件人姓名',
    receiver_phone VARCHAR(20) COMMENT '收件人電話',
    total_amount DECIMAL(10, 2) COMMENT '訂單總金額',
    shipping_address TEXT COMMENT '配送地址',
    notes TEXT COMMENT '備註',
    created_at DATETIME COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (seller_id) REFERENCES users(id)
);

CREATE TABLE order_items (
    id BIGINT PRIMARY KEY COMMENT '訂單項目 ID',
    order_id BIGINT NOT NULL COMMENT '訂單 ID',
    product_id BIGINT NOT NULL COMMENT '產品 ID',
    quantity INT COMMENT '數量',
    unit_price DECIMAL(10, 2) COMMENT '單價',
    total_price DECIMAL(10, 2) COMMENT '總金額',
    created_at DATETIME COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE recently_viewed (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '最近瀏覽 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    product_id BIGINT NOT NULL COMMENT '產品 ID',
    viewed_at DATETIME COMMENT '瀏覽時間',
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE search_history (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '搜尋歷史 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    keyword VARCHAR(255) COMMENT '搜尋關鍵字',
    searched_at DATETIME COMMENT '搜尋時間',
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE recommended_products (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '推薦產品 ID',
    user_id BIGINT COMMENT '使用者 ID',
    product_id BIGINT NOT NULL COMMENT '產品 ID',
    reason VARCHAR(255) COMMENT '推薦原因',
    created_at DATETIME COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE product_reviews (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '產品評價 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    product_id BIGINT NOT NULL COMMENT '產品 ID',
    rating INT COMMENT '評分',
    comment TEXT COMMENT '評論',
    created_at DATETIME COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    is_visible BOOLEAN COMMENT '是否顯示',
    UNIQUE (user_id, product_id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE notifications (
    id BIGINT PRIMARY KEY AUTO_INCREMENT COMMENT '通知 ID',
    user_id BIGINT NOT NULL COMMENT '使用者 ID',
    type VARCHAR(100) COMMENT '通知類型',
    message TEXT COMMENT '通知訊息',
    status ENUM('PENDING', 'READ', 'ARCHIVED') COMMENT '通知狀態',
    created_at DATETIME COMMENT '建立時間',
    updated_at DATETIME COMMENT '更新時間',
    FOREIGN KEY (user_id) REFERENCES users(id)
);
我要做專案
React+Springboot+mysql