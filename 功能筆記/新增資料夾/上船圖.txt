1. Controller

@RestController
@RequestMapping("/api/seller/products/{productId}/images")
public class ProductImageController {

    @Autowired
    private ProductImageService productImageService;

    @PostMapping("/upload")
    public ProductImage uploadImage(@PathVariable Long productId,
                                   @RequestParam("file") MultipartFile file,
                                   HttpSession session) throws IOException {
        UserDto userDto = (UserDto) session.getAttribute("userDto");

        // 呼叫 Service 上傳並新增圖片記錄
        return productImageService.uploadImage(productId, userDto.getUserId(), file);
    }
}
2. Service

@Service
public class ProductImageService {

    private static final String UPLOAD_DIR = "/your/local/path/to/upload/images/";

    @Autowired
    private ProductImageRepository productImageRepository;

    @Autowired
    private ProductRepository productRepository;

    public ProductImage uploadImage(Long productId, Long sellerId, MultipartFile file) throws IOException {
        Product product = productRepository.findById(productId)
            .orElseThrow(() -> new RuntimeException("找不到產品"));

        if (!product.getSeller().getId().equals(sellerId)) {
            throw new RuntimeException("非該賣家產品，無權限");
        }

        List<ProductImage> images = productImageRepository.findByProductIdOrderByNumberAsc(productId);
        if (images.size() >= 10) {
            throw new RuntimeException("最多只能有10張圖片");
        }

        // 產生唯一檔名
        String originalFilename = file.getOriginalFilename();
        String extension = "";
        if (originalFilename != null && originalFilename.contains(".")) {
            extension = originalFilename.substring(originalFilename.lastIndexOf("."));
        }
        String uniqueFileName = UUID.randomUUID().toString() + extension;

        // 建立上傳路徑
        Path uploadPath = Paths.get(UPLOAD_DIR);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        // 儲存檔案到本地
        Path filePath = uploadPath.resolve(uniqueFileName);
        file.transferTo(filePath.toFile());

        // 儲存圖片資訊到資料庫
        ProductImage newImage = new ProductImage();
        newImage.setProduct(product);
        newImage.setImageUrl("/images/" + uniqueFileName);  // 這是存相對路徑，根據你前端存取路徑調整
        newImage.setNumber(images.size() + 1);

        return productImageRepository.save(newImage);
    }
}
3. 前端（簡單示意）

function uploadProductImage(productId, file) {
  const formData = new FormData();
  formData.append("file", file);

  return fetch(`/api/seller/products/${productId}/images/upload`, {
    method: "POST",
    body: formData,
    credentials: "include" // 若有跨域認證 session
  }).then(res => res.json());
}