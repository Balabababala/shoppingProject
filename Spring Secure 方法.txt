



Authentication authentication = authenticationManager.authenticate(
    new UsernamePasswordAuthenticationToken(loginDTO.getUsername(), loginDTO.getPassword())
);
👉 驗證成功：

authenticate() 會回傳一個 Authentication 物件（裡面含有 principal = CustomUserDetails、roles、credentials 已清除等資訊）

你可以透過 authentication.getPrincipal() 拿到你自定義的 CustomUserDetails，再拿到 User Entity。

👉 驗證失敗（重點！）：

authenticate() 會丟出例外（Exception），通常是以下幾種：

BadCredentialsException → 帳號密碼錯誤

UsernameNotFoundException → 找不到 username（這在你的 CustomUserDetailsService 裡會拋）

DisabledException → 帳號被停用（isEnabled() = false）

LockedException → 帳號被鎖住（isAccountNonLocked() = false）

其他 → AuthenticationException 是統一的父類別

直接取user方法
CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();
User user = userDetails.getUser();








教學

1️⃣ Authentication 物件長什麼樣？
當你執行完：


Authentication authentication = authenticationManager.authenticate(...);
→ Authentication 是一個介面，常見的實作是 UsernamePasswordAuthenticationToken
→ 裡面包含：

principal → 通常是你的 CustomUserDetails 物件

credentials → 通常驗證成功後會設成 null（避免密碼洩漏）

authorities → 使用者權限（ROLE_USER / ROLE_ADMIN ...）

isAuthenticated → boolean 是否已認證成功

